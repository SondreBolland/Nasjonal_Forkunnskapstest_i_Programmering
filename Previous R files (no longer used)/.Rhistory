.y <- Daughter
.main <- "Height of parents versus daughter height"
.xlab <- "Mid-parent height"
.ylab <- "Daughter height"
plot(x = .x, y = .y, type = "p", , las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
#a)
#c)
## Rekn ut en lineær modell basert på observasjonene.
.linear_model_y_explained_by_x <- lm(formula = .y ~ .x)
## Ser på utskrift av
.linear_model_y_explained_by_x
a <- .linear_model_y_explained_by_x$coefficients[2]
b <- .linear_model_y_explained_by_x$coefficients[1]
## Fra dette kan vi definere følgende funksjon
.regresjonslinje <- function(x) {a * x + b}
## Som for en gitt innverdi (oppdater til den veriden oppgaven spør om) gir oss
.inn_verdi <- 70
.verdi <- .regresjonslinje(.inn_verdi)
.verdi
#12.2
## Definer vektorene
Midparent <- c(66.0, 65.5, 71.5, 68.0, 70.0, 65.5, 67.0, 70.5, 69.5, 64.5, 67.5)
Daughter <- c(64.0, 63.0, 69.0, 69.0, 69.0, 65.0, 63.0, 68.5, 69.0, 64.0, 67.0)
## Lag figur
.x <- Midparent
.y <- Daughter
.main <- "Height of parents versus daughter height"
.xlab <- "Mid-parent height"
.ylab <- "Daughter height"
plot(x = .x, y = .y, type = "p", , las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
#a)
#c)
## Rekn ut en lineær modell basert på observasjonene.
.linear_model_y_explained_by_x <- lm(formula = .x ~ .y)
## Ser på utskrift av
.linear_model_y_explained_by_x
a <- .linear_model_y_explained_by_x$coefficients[2]
b <- .linear_model_y_explained_by_x$coefficients[1]
## Fra dette kan vi definere følgende funksjon
.regresjonslinje <- function(x) {a * x + b}
## Som for en gitt innverdi (oppdater til den veriden oppgaven spør om) gir oss
.inn_verdi <- 70
.verdi <- .regresjonslinje(.inn_verdi)
.verdi
.residualer <- residuals(.linear_model_y_explained_by_x)
SSE <- sum(.residualer^2)
SST <- sum((.y - mean(.y))^2)
r.squared <- 1 - SSE/SST
## Alternativt kan dere finne SSE ved å se på resultatet fra `anova` og
## dere kan finne r.squared ved å se på resultatet fra `summary`.
.summary <- summary(object = .linear_model_y_explained_by_x)
.anova <- anova(object = .linear_model_y_explained_by_x)
.summary
.anova
.summary
mean = mean(Midparent)
mean
##  Definer vektorene
x <- c(0, 7, 17, 114, 133, 142, 190, 218, 237, 285)
y <- c(20.3, 19.8, 19.5, 15.9, 15.1, 14.7, 11.9, 11.5, 8.3, 6.6)
.x <- x
.y <- y
.lin_mod_y_vs_x <- lm(formula = .y ~ .x)
.residuals <- .lin_mod_y_vs_x$residuals
.lin_mod_y_vs_x
.residuals
.main <- "Wear resistance of certain nuclear reactor components made of Zircaloy-2"
.xlab <- "oxide-layer thickness"
.ylab <- "eddycurrent response"
plot(x = .x, y = .y, type = "p", , las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
.ylab <- "Residuals"
.main <- "Wear resistance of certain nuclear reactor components made of Zircaloy-2"
.xlab <- "oxide-layer thickness"
.ylab <- "Residuals"
plot(x = .x, y = .residuals, type = "p", , las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
.x <- x
.y <- y
.lin_mod_y_vs_x <- lm(formula = .y ~ .x)
.residuals <- .lin_mod_y_vs_x$residuals
.main <- "Wear resistance of certain nuclear reactor components made of Zircaloy-2"
.xlab <- "oxide-layer thickness"
.ylab <- "Residuals"
plot(x = .x, y = .residuals, type = "p", , las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
abline(h = 0, col = "red", lty = 2)
## Bruk 'rstandard' til å regne ut de standardiserte residualene.
.standard_res <- rstandard(model = .lin_mod_y_vs_x)
## Lag et plott som viser '.x' versus '.standard_res'
.main <- "Hovedtittel"
.xlab <- "Tekst langs x-aksen"
.ylab <- "Tekst langs y-aksen"
plot(x = .x, y = .standard_res, type = "p", , las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
## Legg til horisontal linje med skjæringspunkt '0'
abline(h = 0, col = "red", lty = 2)
## Lag et normal-sannsynsplott for de standardiserte residualene.
.main <- "Hovedtittel"
.xlab <- "Tekst langs x-aksen"
.ylab <- "Tekst langs y-aksen"
qqnorm(.standard_res, las = 1,
main = .main,
xlab = .xlab,
ylab = .ylab)
## Legg til linje gjennom første og tredje kvartil.
qqline(.standard_res, col = "red", lty = 2)
## Bruk 'rstandard' til å regne ut de standardiserte residualene.
.standard_res <- rstandard(model = .lin_mod_y_vs_x)
## Lag et plott som viser '.x' versus '.standard_res'
.main <- "Wear resistance of certain nuclear reactor components made of Zircaloy-2"
.xlab <- "oxide-layer thickness"
.ylab <- "Standardized residuals"
plot(x = .x, y = .standard_res, type = "p", las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
## Legg til horisontal linje med skjæringspunkt '0'
abline(h = 0, col = "red", lty = 2)
## Lag et normal-sannsynsplott for de standardiserte residualene.
.main <- "Wear resistance of certain nuclear reactor components made of Zircaloy-2"
.xlab <- "Tekst langs x-aksen"
.ylab <- "Tekst langs y-aksen"
qqnorm(.standard_res, las = 1,
main = .main,
xlab = .xlab,
ylab = .ylab)
## Legg til linje gjennom første og tredje kvartil.
qqline(.standard_res, col = "red", lty = 2)
## Lag et normal-sannsynsplott for de standardiserte residualene.
.main <- "Wear resistance of certain nuclear reactor components made of Zircaloy-2"
.xlab <- "z-score"
.ylab <- "Standardized residuals"
qqnorm(.standard_res, las = 1,
main = .main,
xlab = .xlab,
ylab = .ylab)
## Legg til linje gjennom første og tredje kvartil.
qqline(.standard_res, col = "red", lty = 2)
help("rstandard")
## Bruk 'rstandard' til å regne ut de standardiserte residualene.
.standard_res <- rstandard(model = .lin_mod_y_vs_x, sd = 0.7921)
## Lag et plott som viser '.x' versus '.standard_res'
.main <- "Wear resistance of certain nuclear reactor components made of Zircaloy-2"
.xlab <- "oxide-layer thickness"
.ylab <- "Standardized residuals"
plot(x = .x, y = .standard_res, type = "p", las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
## Legg til horisontal linje med skjæringspunkt '0'
abline(h = 0, col = "red", lty = 2)
## Skriv inn observasjonene:
observasjoner <- c(30.6, 30.1, 15.6, 26.7, 27.1, 25.4, 35.0, 30.8,
31.9, 53.2, 12.5, 23.2, 8.8, 24.9, 30.2)
.x <- observasjoner
## Definer mu som skal brukes i testen, og regn ut test-observatoren:
.mu0 <- 30
.centered <- .x - .mu0
.signed_ranks <- sign(.centered) * rank(abs(.centered))
s_pluss <- sum(.signed_ranks[.signed_ranks > 0])
## Finc den kritiske verdien 'c1' for dette tilfellet.
## (Formelen under gjennskaper tabell A.12 på side 809.)
.level <- 0.25
.c1 <- 1 + qsignrank(p = .level, n = length(.x), lower.tail = FALSE)
## Skriv inn observasjonene:
observasjoner <- c(30.6, 30.1, 15.6, 26.7, 27.1, 25.4, 35.0, 30.8,
31.9, 53.2, 12.5, 23.2, 8.8, 24.9, 30.2)
.x <- observasjoner
## Definer mu som skal brukes i testen, og regn ut test-observatoren:
.mu0 <- 30
.centered <- .x - .mu0
.signed_ranks <- sign(.centered) * rank(abs(.centered))
s_pluss <- sum(.signed_ranks[.signed_ranks > 0])
## Finc den kritiske verdien 'c1' for dette tilfellet.
## (Formelen under gjennskaper tabell A.12 på side 809.)
.level <- 0.10
.c1 <- 1 + qsignrank(p = .level, n = length(.x), lower.tail = FALSE)
.n <- length(.x)
.c2 <- (.n * (.n + 1) / 2) - .c2
.n <- length(.x)
.c2 <- (.n * (.n + 1) / 2) - .c1
## Definer vektorene
Unexposed <- c( 8, 11, 12, 14, 20, 43, 111)
Exposed <- c(35, 56, 83, 92, 128, 150, 176, 208)
## Registrer lengdene
m <- min(length(Unexposed), length(Exposed)) ## Se merknad før eksempel 14.3
n <- max(length(Unexposed), length(Exposed)) ## (side 768) mht valg av m og n.
## Gjør relevante endringer av koden under, så du får svart på spørsmålet.
.x <- runif(n = m) ## Test-vektor for å vise koden.
.y <- runif(n = n) ## Test-vektor for å vise koden.
Delta <- -0.3 ## Dette er verdien 'mu1 - mu2' har under H0.
## Regn ut test-observatoren.
w <- sum(rank(c(.x - Delta, .y))[1:m])
## Kritisk verdi: Her hentet fra tabell A.13, side 810.
.c1 <- 71
## Merk: I R ville vi normalt brukt 'wilcox.test' for denne oppgaven, og det er ingen
## enkel formel som direkte reproduserer tabell A.13.
m
n
\end{document}
\textbf{Conclusion:} Using a Wilcoxon rank-sum test we calculate w and $c_1$ to decide if we should reject the null hypothesis $H_0$: $\mu_1 - \mu_2 = 25 $ in favor for $H_a$: $\mu_1 - \mu_2 > 25$.
We reject the $H_0$ iff w \geq $c_1$. The values of w and $c_1$ are:
$w = \Sexpr{w}$, $c_1 = \Sexpr{.c1}$. Hence we keep the null hypothesis $H_0$.
help(rnorm)
help(rep)
J = c(5,5,5,5)
rep(1:4, J)
help(as.factor)
i = rep(1:4, J)
as.factor(i)
k = as.factor(i)
k
help(aov)
help(anova)
help(TukeyHSD)
shapiro.test(data$Total)
setwd("C:/Users/sondr/Documents/Locker/Skole/Didaktikk - PhD/research projects/kartlegging/analysis/data") # you'll set this to your directory
library(knitr)
library(dplyr)
library(plyr)
library(ggplot2)
library(tidyr)
library(gridExtra)
library(stringr)
library(psych)
library(car)
library(lme4)
library(forcats)
library(scales)  # for percentage scales
library(sjPlot)
library(sjmisc)
library(parameters)
data = read.csv("results.csv", sep = ';', fileEncoding="UTF-8-BOM")
nrow(data)
############## DATA CLEANING/PROCESSING ##############
# Has taken a programming course at university
table(data$UniversityExperience, useNA = "always")
data$UniversityExperience[data$UniversityExperience == "Ja, kurset ga 10 studiepoeng"] = TRUE
data$UniversityExperience[data$UniversityExperience == "Ja, kurset ga 5 studiepoeng"] = TRUE
data$UniversityExperience[data$UniversityExperience == "Ja, kurset ga 7.5 studiepoeng"] = TRUE
data$UniversityExperience[data$UniversityExperience == "Ja, men kurset ga ikke studiepoeng"] = TRUE
data$UniversityExperience[data$UniversityExperience == "Nei"] = FALSE
# Filter out those you have taken a programming course at university
data = data %>%
filter(UniversityExperience %in% c(FALSE))
# Gender
data$Gender[data$Gender != "f" & data$Gender != "m"] = "Other"
table(data$Gender, useNA = "always")
# Year of graduation from Highschool
table(data$GraduateYear, useNA = "always")
data$G2023 = NA
data$G2023[data$GraduateYear == "2023"] = TRUE
data$G2023[is.na(data$G2023)] = FALSE
table(data$G2023, useNA = "always")
# University / Høyskole
data_institution = data %>%
filter(Institution %in% c("UiB", "NTNU", "UiS", "UiO", "NMBU", "UiA", "HvL", "OSLOMET", "UiT", "HIOF", "Kristiania"))
table(data_institution$Institution, useNA = "always")
# Learned Python
table(data$LearnedPython, useNA = "always")
data$LearnedPython[data$LearnedPython == "Ja, jeg lærte Python"] = "Learned Python"
data$LearnedPython[data$LearnedPython == "Jeg lærte ikke programmering i matematikkfagene" | data$LearnedPython == "Nei, et annet programmeringssrpåk"] = "Did not learn Python"
#data$LearnedPython[data$GraduateYear != "2023"] = "aGraduated before 2023"
table(data$LearnedPython, useNA = "always")
data_python = data %>%
filter(LearnedPython %in% c("Learned Python", "Did not learn Python"))
wilcox.test(Total~LearnedPython, data_python)
# Completed voluntary programming course in highschool
table(data$IT1, useNA = "always")
table(data$IT2, useNA = "always")
table(data$X, useNA = "always")
data$VoluntarySubject = NA
data$VoluntarySubject[data$IT1 == "Informasjonsteknologi 1 (IT1)"] = TRUE
data$VoluntarySubject[data$IT1 == "Informasjonsteknologi 2 (IT2)"] = TRUE
data$VoluntarySubject[data$IT1 == "Programmering og modellering X"] = TRUE
data$VoluntarySubject[is.na(data$VoluntarySubject)] = FALSE
table(data$VoluntarySubject, useNA = "always")
# IT1
data$IT1[data$IT1 == "Informasjonsteknologi 1 (IT1)"] = TRUE
data$IT1[data$IT1 == ""] = FALSE
# IT2
data$IT2[data$IT2 == "Informasjonsteknologi 2 (IT2)"] = TRUE
data$IT2[data$IT2 == ""] = FALSE
#Programmering og Modellering X
data$X[data$X == "Programmering og modellering X"] = TRUE
data$X[data$X == ""] = FALSE
table(data$IT1, useNA = "always")
table(data$IT2, useNA = "always")
table(data$X, useNA = "always")
### MATH SUBJECTS ###
table(data$P1, useNA = "always")
table(data$P2, useNA = "always")
table(data$T1, useNA = "always")
table(data$S1, useNA = "always")
table(data$S2, useNA = "always")
table(data$R1, useNA = "always")
table(data$R2, useNA = "always")
# Math Subjects
data$MathSubjects = NA
data$MathSubjects[data$P1 == "1P"] = "1P"
data$MathSubjects[data$P2 == "2P"] = "2P"
data$MathSubjects[data$T1 == "1T"] = "1T"
data$MathSubjects[data$S1 == "S1"] = "S1"
data$MathSubjects[data$S2 == "S2"] = "S2"
data$MathSubjects[data$R1 == "R1"] = "R1"
data$MathSubjects[data$R2 == "R2"] = "R2"
table(data$MathSubjects, useNA = "always")
# 1P
data$P1[data$P1 == "1P"] = TRUE
data$P1[data$P1 == ""] = FALSE
# 2P
data$P2[data$P2 == "2P"] = TRUE
data$P2[data$P2 == ""] = FALSE
# 1T
data$T1[data$T1 == "1T"] = TRUE
data$T1[data$T1 == ""] = FALSE
# S1
data$S1[data$S1 == "S1"] = TRUE
data$S1[data$S1 == ""] = FALSE
# S2
data$S2[data$S2 == "S2"] = TRUE
data$S2[data$S2 == ""] = FALSE
# R1
data$R1[data$R1 == "R1"] = TRUE
data$R1[data$R1 == ""] = FALSE
# R2
data$R2[data$R2 == "R2"] = TRUE
data$R2[data$R2 == ""] = FALSE
# SOCIAL: S2
data$SocialMath = NA
data$SocialMath[data$S2 == TRUE & data$R2 == FALSE] = TRUE
data$SocialMath[is.na(data$SocialMath)] = FALSE
table(data$SocialMath, useNA = "always")
# BASE SOCIAL: S1
data$BaseSocialMath = NA
data$BaseSocialMath[data$P2 == FALSE & data$S2 == FALSE & data$R2 == FALSE & data$R1 == FALSE & data$S1 == TRUE] = TRUE
data$BaseSocialMath[is.na(data$BaseSocialMath)] = FALSE
table(data$BaseSocialMath, useNA = "always")
# REALFAG: R2
data$ScienceMath = NA
data$ScienceMath[data$R2 == TRUE] = TRUE
data$ScienceMath[is.na(data$ScienceMath)] = FALSE
table(data$ScienceMath, useNA = "always")
# BASE SCIENCE: R1
data$BaseScienceMath = NA
data$BaseScienceMath[data$P2 == FALSE & data$S2 == FALSE & data$R2 == FALSE & data$R1 == TRUE & data$S1 == FALSE] = TRUE
data$BaseScienceMath[is.na(data$BaseScienceMath)] = FALSE
table(data$BaseScienceMath, useNA = "always")
# Practical
data$PracticalMath = NA
data$PracticalMath[data$P2 == TRUE & data$S2 == FALSE & data$R2 == FALSE & data$R1 == FALSE & data$S1 == FALSE] = TRUE
data$PracticalMath[is.na(data$PracticalMath)] = FALSE
table(data$PracticalMath, useNA = "always")
### Attitude
table(data$Effort, useNA = "always")
table(data$Enjoyment, useNA = "always")
table(data$Work, useNA = "always")
table(data$Interest, useNA = "always")
table(data$Studies, useNA = "always")
data$AttitudeEffort = NA
data$AttitudeEffort[data$Effort == "Enig"] = 5
data$AttitudeEffort[data$Effort == "Litt enig"] = 4
data$AttitudeEffort[data$Effort == "Nøytral"] = 3
data$AttitudeEffort[data$Effort == "Litt uenig"] = 2
data$AttitudeEffort[data$Effort == "Uenig"] = 1
data$AttitudeEnjoyment = NA
data$AttitudeEnjoyment[data$Enjoyment == "Enig"] = 5
data$AttitudeEnjoyment[data$Enjoyment == "Litt enig"] = 4
data$AttitudeEnjoyment[data$Enjoyment == "Nøytral"] = 3
data$AttitudeEnjoyment[data$Enjoyment == "Litt uenig"] = 2
data$AttitudeEnjoyment[data$Enjoyment == "Uenig"] = 1
data$AttitudeWork = NA
data$AttitudeWork[data$Work == "Enig"] = 5
data$AttitudeWork[data$Work == "Litt enig"] = 4
data$AttitudeWork[data$Work == "Nøytral"] = 3
data$AttitudeWork[data$Work == "Litt uenig"] = 2
data$AttitudeWork[data$Work == "Uenig"] = 1
data$AttitudeInterest = NA
data$AttitudeInterest[data$Interest == "Enig"] = 5
data$AttitudeInterest[data$Interest == "Litt enig"] = 4
data$AttitudeInterest[data$Interest == "Nøytral"] = 3
data$AttitudeInterest[data$Interest == "Litt uenig"] = 2
data$AttitudeInterest[data$Interest == "Uenig"] = 1
data$AttitudeStudies = NA
data$AttitudeStudies[data$Studies == "Enig"] = 5
data$AttitudeStudies[data$Studies == "Litt enig"] = 4
data$AttitudeStudies[data$Studies == "Nøytral"] = 3
data$AttitudeStudies[data$Studies == "Litt uenig"] = 2
data$AttitudeStudies[data$Studies == "Uenig"] = 1
table(data$AttitudeEffort, useNA = "always")
table(data$AttitudeEnjoyment, useNA = "always")
table(data$AttitudeWork, useNA = "always")
table(data$AttitudeInterest, useNA = "always")
table(data$AttitudeStudies, useNA = "always")
### Outside experience
table(data$Outside1, useNA = "always")
table(data$Outside2, useNA = "always")
table(data$Outside3, useNA = "always")
table(data$Outside4, useNA = "always")
table(data$Outside5, useNA = "always")
table(data$Outside6, useNA = "always")
table(data$Outside7, useNA = "always")
table(data$Outside8, useNA = "always")
data$OutsideExperience = NA
data$OutsideExperience[data$Outside1 == "Minst 30 timer erfaring med tekst-basert programmering"] = "30 hour text"
data$OutsideExperience[data$Outside2 == "Minst 50 timer erfaring med tekst-basert programmering"] = "50 hour text"
data$OutsideExperience[data$Outside3 == "Minst 100 timer erfaring med tekst-basert programmering"] = "100 hour text"
data$OutsideExperience[data$Outside4 == "Mer enn 120 timer erfaring med tekst-basert programmering"] = "120 hour text"
data$OutsideExperience[data$Outside5 == "Minst 30 timer erfaring med blokk-basert programmering"] = "30 hour block"
data$OutsideExperience[data$Outside6 == "Minst 50 timer erfaring med blokk-basert programmering"] = "50 hour block"
data$OutsideExperience[data$Outside7 == "Minst 100 timer erfaring med blokk-basert programmering"] = "100 hour block"
data$OutsideExperience[data$Outside8 == "Mer enn 120 timer erfaring med blokk-basert programmering"] = "120 hour block"
data$OutsideExperience[is.na(data$OutsideExperience)] = "No outside experience"
table(data$OutsideExperience, useNA = "always")
setwd("C:/Users/sondr/Documents/Locker/Skole/Didaktikk - PhD/research projects/kartlegging/analysis") # you'll set this to your directory
source("load_data.R")
source("functions.R")
summary(data$Total)
sd(data$Total)
nrow(data)
data_pre = data %>%
filter(GraduateYear %in% c("Før 2020", "2020", "2021 - 2022"))
data_2023 = data %>%
filter(GraduateYear %in% c("2023"))
data_no_electives = data_pre %>%
filter(IT1 %in% c(FALSE), IT2 %in% c(FALSE), X %in% c(FALSE))
summary(data_no_electives$Total)
nrow(data_no_electives)
score_analysis(data_no_electives)
data_no_electives_2023 = data_no_electives %>%
filter(GraduateYear %in% c("2023"))
summary(data_no_electives_2023$Total)
nrow(data_no_electives_2023)
score_analysis(data_no_electives_2023)
shapiro.test(data$Total)
ggqqplot(data$Total)
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
setwd("C:/Users/sondr/Documents/Locker/Skole/Didaktikk - PhD/research projects/kartlegging/analysis") # you'll set this to your directory
source("load_data.R")
source("functions.R")
summary(data$Total)
sd(data$Total)
nrow(data)
data_pre = data %>%
filter(GraduateYear %in% c("Før 2020", "2020", "2021 - 2022"))
data_2023 = data %>%
filter(GraduateYear %in% c("2023"))
data_no_electives = data_pre %>%
filter(IT1 %in% c(FALSE), IT2 %in% c(FALSE), X %in% c(FALSE))
summary(data_no_electives$Total)
nrow(data_no_electives)
score_analysis(data_no_electives)
data_no_electives_2023 = data_no_electives %>%
filter(GraduateYear %in% c("2023"))
summary(data_no_electives_2023$Total)
nrow(data_no_electives_2023)
score_analysis(data_no_electives_2023)
shapiro.test(data$Total)
ggqqplot(data$Total)
# All
ggplot(data, aes(x=Total)) +
geom_histogram(boundary = 0, closed = "left", breaks=seq(0, 23, 1), fill="#FF9999", color="#e9ecef", alpha=0.9) +
#scale_y_continuous(labels=scales::percent) +
labs(y= "Frequency", x = "Test score")
ggplot(data, aes(x=Total,fill=factor(Pre))) +
geom_histogram(boundary = 0, closed = "left", breaks=seq(0, 23, 1), binwidth=1, alpha=0.5, position = 'identity') +
labs(y= "Frequency", x = "Test score") +
scale_fill_discrete(labels = c(TRUE, FALSE))+
# Pre 2023
ggplot(data_pre, aes(x=Total)) +
geom_histogram(boundary = 0, closed = "left", breaks=seq(0, 23, 1), fill="#FF9999", color="#e9ecef", alpha=0.9) +
#scale_y_continuous(labels=scales::percent) +
labs(y= "Frequency", x = "Test score")
# 2023
ggplot(data_2023, aes(x=Total)) +
geom_histogram(boundary = 0, closed = "left", breaks=seq(0, 23, 1), fill="#FF9999", color="#e9ecef", alpha=0.9) +
#scale_y_continuous(labels=scales::percent) +
labs(y= "Frequency", x = "Test score")
# No electives
ggplot(data_no_electives, aes(x=Total)) +
geom_histogram(boundary = 0, closed = "left", breaks=seq(0, 23, 1), fill="#FF9999", color="#e9ecef", alpha=0.9) +
#scale_y_continuous(labels=scales::percent) +
labs(y= "Frequency", x = "Test score")
# No electives 2023
ggplot(data_no_electives_2023, aes(x=Total)) +
geom_histogram(boundary = 0, closed = "left", breaks=seq(0, 23, 1), fill="#FF9999", color="#e9ecef", alpha=0.9) +
#scale_y_continuous(labels=scales::percent) +
labs(y= "Frequency", x = "Test score")
# SPLIT PLOT
# 2023 VS PRE 2023
ggplot(data, aes(x=Total,fill=factor(G2023))) +
geom_histogram(binwidth=1, alpha=0.5, position = 'identity') +
labs(y= "Frequency", x = "Test score") +
scale_fill_discrete(labels = c(TRUE, FALSE))
# Electives 2023 VS PRE 2023
ggplot(data_no_electives, aes(x=Total,fill=factor(G2023))) +
geom_histogram(binwidth=1, alpha=0.5, position = 'identity') +
labs(y= "Frequency", x = "Test score") +
scale_fill_discrete(labels = c(TRUE, FALSE))
#### STASTISTICAL TESTING
# Difference 2023 and pre
stu_data = table(data_2023$Total, data_pre$Tota)
chisq.test(stu_data)
m <-rbind(data_2023$Total, data_pre$Total)
chisq.test(m)
chisq.test(data_2023$Total, data_pre$Total, correct=FALSE)
chisq.test(data_2023$Total,p=data_pre$Total, simulate.p.value = T,rescale.p = T, B = 2000)
ggqqplot(data$Total)
qnorm(0.975)
qnorm(0.975)
qnorm(0.975)
